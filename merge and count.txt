#include <stdio.h>
#include <stdlib.h>

long long mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
    int i = left;
    int j = mid;
    int k = left;
    long long inversionCount = 0;

    while (i <= mid - 1 && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            inversionCount += mid - i;
        }
    }

    while (i <= mid - 1) {
        temp[k++] = arr[i++];
    }

    while (j <= right) {
        temp[k++] = arr[j++];
    }

    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }

    return inversionCount;
}

long long mergeSortAndCount(int arr[], int temp[], int left, int right) {
    long long inversionCount = 0;
    if (right > left) {
        int mid = (left + right) / 2;
        inversionCount += mergeSortAndCount(arr, temp, left, mid);
        inversionCount += mergeSortAndCount(arr, temp, mid + 1, right);
        inversionCount += mergeAndCount(arr, temp, left, mid + 1, right);
    }
    return inversionCount;
}

long long inversionCount(int arr[], int n) {
    int *temp = (int *)malloc(sizeof(int) * n);
    return mergeSortAndCount(arr, temp, 0, n - 1);
}

int main() {
    int arr[] = {8, 4, 2, 1};
    int n = sizeof(arr) / sizeof(arr[0]);

    long long invCount = inversionCount(arr, n);
    printf("Inversion Count: %lld\n", invCount);

    return 0;
}
